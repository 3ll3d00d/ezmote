name: create apps
on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    branches: ['*']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
defaults:
  run:
    shell: bash
jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: true
      - name: Setup node_modules
        run: yarn install --frozen-lockfile
      - name: Build UI
        run: yarn build
      - name: Get latest release version number
        id: get_version
        uses: battila7/get-version-action@v2
      - name: Create Distribution
        id: create_dist
        run: |
          cd build
          tar cfz ../ezmote-${{ steps.get_version.outputs.version-without-v }}.tar.gz *
          cd ..
          echo ::set-output name=binary_path::"ezmote-${{ steps.get_version.outputs.version-without-v }}.tar.gz"
          echo ::set-output name=binary_name::"ezmote-${{ steps.get_version.outputs.version-without-v }}.tar.gz"
          echo ::set-output name=binary_content_type::"application/x-tar"
      - name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ${{ steps.create_dist.outputs.binary_name }}
          asset_path: ${{ steps.create_dist.outputs.binary_path }}
          asset_content_type: ${{ steps.create_dist.outputs.binary_content_type }}
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          build-args: |
            CMDSERVER_IP_ARG=${{ env.CMDSERVER_IP }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
